{"version":3,"sources":["UI/common/components-common/Title/Title.tsx","UI/common/components-common/Loading/Loading.tsx","DAL/api/authAPI.ts","BLL/reducers/profile-reducer.ts","utils/error-utils.ts","BLL/reducers/login-reducer.ts","BLL/reducers/app-reducer.ts","BLL/reducers/registration-reducer.ts","UI/common/components-common/SnackbarError/SnackbarError.tsx","UI/components/RegistrationForm/RegistrationForm.tsx","UI/components/Profile/Profile.tsx","UI/common/components-common/spinner/Spinner.tsx","UI/components/Login/Login.tsx","BLL/reducers/recoveryPassword-reducer.ts","UI/components/RecoveryPassword/RecoveryPassword.tsx","BLL/reducers/forgotPassword-reducer.ts","UI/common/components-common/SimplePopover/SimplePopover.tsx","UI/components/ForgotPassword/FogotPassword.tsx","UI/common/components-common/Loading/CircleLoading.tsx","DAL/api/cardsAPI.ts","BLL/reducers/cardsPack-reducer.ts","UI/components/CardsPack/CardsPack.tsx","BLL/reducers/myModules-reducer.ts","UI/components/MyModules/MyModules.tsx","App.tsx","serviceWorker.ts","BLL/reducers/cardsCard-reducer.ts","BLL/store.ts","index.tsx","UI/components/RegistrationForm/RegistrationForm.module.scss","UI/components/Profile/Profile.module.scss","UI/components/RecoveryPassword/RecoveryPassword.module.scss","UI/components/ForgotPassword/ForgotPassword.module.scss","UI/common/components-common/Title/Title.module.scss","UI/common/css/styles/container.module.scss","UI/assets/images/private.jpeg","UI/assets/images/publicItem.jpeg","UI/common/components-common/spinner/spinner.svg","UI/components/CardsPack/CardsPack.module.scss","UI/components/MyModules/MyModules.module.scss"],"names":["Title","React","memo","title","className","classes","useStyles","makeStyles","theme","createStyles","loading","position","top","left","zIndex","width","Loading","styles","LinearProgress","instance","axios","create","baseURL","withCredentials","authAPI","userData","post","data","delete","email","from","message","password","userId","resetPasswordToken","initialState","status","error","isInitialized","setLoadingAC","loadingStatus","type","handleServerNetworkError","dispatch","errorMessage","response","setAppErrorMessage","initState","isSignIn","created","isAdmin","name","publicCardPacksCount","rememberMe","token","tokenDeathTime","updated","verified","__v","_id","success","isSuccessfulMessage","setSuccessfulMessage","value","setAppStatus","isRegistered","userRegisteredAC","Alert","props","elevation","variant","SnackbarError","useSelector","state","app","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","grid","maxWidth","margin","formControl","container","height","formGroup","alignItems","textField","paddingBottom","button","marginBottom","registration","textAlign","RegistrationForm","profile","login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","then","res","catch","finally","to","registrationForm","Grid","justify","item","Paper","style","padding","color","form","handleSubmit","FormControl","FormGroup","inputBox","TextField","label","undefined","getFieldProps","Button","disabled","isValid","dirty","textDecoration","Profile","logOutHandler","useCallback","err","containerStyle","profileContent","btn","onClick","modules","module","src","publicPhoto","alt","privatePhoto","Spinner","bottom","transform","spinner","gridItem","display","justifyContent","formLabel","errMessage","signUp","disable","opacity","pointerEvents","enable","Login","setUser","FormControlLabel","control","Checkbox","checked","passwordIsUpdated","RecoveryPassword","recoveryPassword","useParams","confirmPassword","recoveryPasswordTC","emailSentSuccessful","typography","spacing","SimplePopover","Popover","anchorOrigin","vertical","horizontal","transformOrigin","Typography","backgroundColor","ForgotPassword","forgotPassword","progressStyle","CircleLoading","CircularProgress","cardsAPI","get","cardsCount","grade","more_id","path","private","rating","shots","user_id","user_name","CardsPack","cardsPack","useEffect","cardsPacks","cardPacks","useMemo","columns","Header","accessor","tableInstance","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","table","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","MyModules","myModules","getMyModulesTC","App","exact","Boolean","window","location","hostname","match","reducers","combineReducers","action","cardsCard","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","unregister","console","exports"],"mappings":"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","file":"static/js/main.754f96af.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Title.module.scss\";\r\n\r\ntype PropsType = {\r\n\ttitle: string\r\n}\r\n\r\nexport const Title = React.memo(({title} : PropsType) => {\r\n\treturn (\r\n\t\t<div className={classes.title}>\r\n\t\t\t<h1>{title}</h1>\r\n\t\t</div>\r\n\t)\r\n})","import React from \"react\";\r\nimport {createStyles, LinearProgress, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tloading:{\r\n\t\t\tposition: 'absolute',\r\n\t\t\ttop: '80px',\r\n\t\t\tleft: '0',\r\n\t\t\tzIndex: 1,\r\n\t\t\twidth: '100%'\r\n\t\t}\r\n\t}),\r\n);\r\n\r\nexport const Loading = React.memo(() => {\r\n\tconst styles = useStyles();\r\n\treturn <LinearProgress className={styles.loading}/>\r\n})","import axios from 'axios'\r\nimport {UserDataType} from \"../../UI/components/RegistrationForm/RegistrationForm\";\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\twithCredentials: true\r\n})\r\n\r\nexport const authAPI = {\r\n\tcreateUser(userData: UserDataType) {\r\n\t\treturn instance.post<ICreateUser>('auth/register', userData)\r\n\t},\r\n\tlogin(data: LoginParamsType) {\r\n\t\treturn instance.post<IResponseLogin>(`auth/login`, data)\r\n\t},\r\n\tme() {\r\n\t\treturn instance.post<IResponseMe>('auth/me', {})\r\n\t},\r\n\tlogout() {\r\n\t\treturn instance.delete<{ info: string, error: string }>('auth/me')\r\n\t},\r\n\tsendRecoveryEmail(email: string) {\r\n\t\treturn instance.post<{ info: string, error: string }>('auth/forgot', {\r\n\t\t\temail: email,\r\n\t\t\tfrom: 'testdenis12345@gmail.com',\r\n\t\t\tmessage: `<div style=\"background-color: lime; padding: 15px\"> \r\n\t\t\t\t\tpassword recovery link: \t\r\n\t\t\t\t\t<a href='https://prudiusdenys.github.io/friday-project/#/recovery/$token$'>link</a></div>`\r\n\t\t})\r\n\t},\r\n\tsetNewPassword(password: string, userId: string) {\r\n\t\treturn instance.post<{ info: string, error: string }>('auth/set-new-password', {password: password, resetPasswordToken: userId\t})\r\n\t}\r\n}\r\n\r\n// types and interfaces\r\n\r\n// common interface\r\ninterface IResponse{\r\n\tcreated: string\r\n\temail: string\r\n\tisAdmin: boolean\r\n\tname: string\r\n\trememberMe: boolean\r\n\tupdated: string\r\n\tverified: boolean\r\n\t_id: string\r\n\tpublicCardPacksCount: number // количество колод\r\n}\r\n\r\ninterface ICreateUser{\r\n\taddedUser : IResponse\r\n\tsuccess: boolean\r\n}\r\n\r\nexport interface IResponseLogin extends IResponse  {\r\n\tavatar?: string\r\n\ttoken?: string,\r\n\ttokenDeathTime?: number\r\n\terror: string | null,\r\n}\r\n\r\nexport type LoginParamsType = {\r\n\temail: string\r\n\tpassword: string\r\n\trememberMe: boolean\r\n}\r\n\r\ninterface IResponseMe extends IResponse{\r\n\tavatar?: string\r\n\terror: string\r\n}","import {Dispatch} from \"redux\";\r\n\r\nconst PROFILE_SET_LOADING = 'PROFILE_SET_LOADING';\r\n\r\nconst initialState: InitialStateType = {\r\n\tstatus: 'idle',\r\n\terror: null,\r\n\tisInitialized: false,\r\n\tloading: false\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType):InitialStateType  => {\r\n\tswitch (action.type) {\r\n\t\tcase PROFILE_SET_LOADING: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: action.loadingStatus\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\n\r\n//Action creators\r\n\r\nexport const setLoadingAC = (loadingStatus: boolean) => {\r\n\treturn {type: PROFILE_SET_LOADING, loadingStatus}\r\n}\r\n\r\n// Thanks\r\n\r\nexport const setLoadingTC = (loadingStatus: boolean) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(loadingStatus))\r\n}\r\n\r\n// types\r\n\r\ntype InitialStateType = {\r\n\tstatus: 'idle' | 'success' | 'failed',\r\n\terror: null | string,\r\n\tisInitialized: boolean,\r\n\tloading: boolean\r\n}\r\ntype ActionsType = ReturnType<typeof setLoadingAC>","import {Dispatch} from \"redux\";\r\nimport {AppErrorMessageType, setAppErrorMessage} from \"../BLL/reducers/app-reducer\";\r\n\r\nexport const handleServerNetworkError = (error: ServerErrorType, dispatch: DispatchType) => {\r\n\tconst errorMessage = error.response.data.error ? error.response.data.error : 'Some error :('\r\n\tdispatch(setAppErrorMessage(errorMessage))\r\n}\r\n\r\ntype DispatchType = Dispatch<AppErrorMessageType>\r\ntype ServerErrorType = {response:{data:{error: string}}}","import {Dispatch} from \"redux\";\r\nimport {LoginParamsType, authAPI, IResponseLogin} from \"../../DAL/api/authAPI\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\n\r\nconst initState: StateType = {\r\n\tisSignIn: false,\r\n\tcreated: '',\r\n\temail: '',\r\n\tisAdmin: false,\r\n\tname: '',\r\n\tpublicCardPacksCount: 0,\r\n\trememberMe: false,\r\n\ttoken: '',\r\n\ttokenDeathTime: 1604256677868,\r\n\tupdated: '',\r\n\tverified: true,\r\n\t__v: 0,\r\n\t_id: '',\r\n}\r\n\r\nexport const loginReducer = (state: StateType = initState, action: ActionType): StateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"Login/IS-SIGN-IN\": {\r\n\t\t\treturn {...state, isSignIn: action.isSignIn}\r\n\t\t}\r\n\t\tcase \"Login/SET-USER\": {\r\n\t\t\treturn {...state, ...action.data}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// Action\r\n\r\nexport const isSignIn = (isSignIn: boolean) => ({type: 'Login/IS-SIGN-IN', isSignIn} as const)\r\nexport const setUser = (data: IResponseLogin) => ({type: 'Login/SET-USER', data} as const)\r\n\r\n// Thunk\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n\tdispatch(setAppStatus(false))\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.login(data)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(setUser(res.data))\r\n\t\t\tdispatch(isSignIn(true))\r\n\t\t\tdispatch(setAppStatus(true))\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\thandleServerNetworkError(err, dispatch)\r\n\t\t\tdispatch(setAppStatus(true))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.logout()\r\n\t\t.then(res => {\r\n\t\t\tdispatch(isSignIn(false))\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\tdebugger\r\n\t\t\thandleServerNetworkError(err, dispatch)\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n// Types\r\n\r\ntype StateType = {\r\n\tisSignIn: boolean,\r\n\tcreated: string,\r\n\temail: string,\r\n\tisAdmin: boolean,\r\n\tname: string,\r\n\tpublicCardPacksCount: number,\r\n\trememberMe: boolean,\r\n\ttoken: string,\r\n\ttokenDeathTime: number,\r\n\tupdated: string,\r\n\tverified: boolean,\r\n\t__v: number,\r\n\t_id: string,\r\n}\r\ntype ActionType = IsSignInType | ReturnType<typeof setUser>\r\ntype IsSignInType = ReturnType<typeof isSignIn>","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../DAL/api/authAPI\";\r\nimport {isSignIn, setUser} from \"./login-reducer\";\r\n\r\nconst initState: StateType = {\r\n\terrorMessage: null,\r\n\tsuccess: true,\r\n\tisInitialized: false,\r\n\tisSuccessfulMessage: false\r\n}\r\n\r\nexport const appReducer = (state: StateType = initState, action: ActionType): StateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"app/SET-STATUS\": {\r\n\t\t\treturn {...state, success: action.success}\r\n\t\t}\r\n\t\tcase \"app/SET-ERROR-MESSAGE\": {\r\n\t\t\treturn {...state, errorMessage: action.errorMessage}\r\n\t\t}\r\n\t\tcase \"app/SET-APP-INITIALIZED\": {\r\n\t\t\treturn {...state, isInitialized: action.value}\r\n\t\t}\r\n\t\tcase \"app/SET-SUCCESS-MESSAGE\": {\r\n\t\t\treturn {...state, isSuccessfulMessage: action.value}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// Action\r\nexport const setAppErrorMessage = (errorMessage: string | null) => {\r\n\treturn {type: 'app/SET-ERROR-MESSAGE', errorMessage} as const\r\n}\r\nexport const setAppInitialized = (value: boolean) => {\r\n\treturn {type: 'app/SET-APP-INITIALIZED', value} as const\r\n}\r\nexport const setSuccessfulMessage = (value: boolean) => {\r\n\treturn {type: 'app/SET-SUCCESS-MESSAGE', value} as const\r\n}\r\n\r\nexport const setAppStatus = (success: boolean) => ({type: 'app/SET-STATUS', success} as const)\r\n// Thunk\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\tauthAPI.me()\r\n\t\t.then(res => {\r\n\t\t\tdispatch(isSignIn(true))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setAppInitialized(true)))\r\n}\r\n\r\n// Types\r\ntype StateType = {\r\n\terrorMessage: string | null\r\n\tsuccess: boolean,\r\n\tisInitialized: boolean\r\n\tisSuccessfulMessage: boolean\r\n}\r\n\r\ntype ActionType = AppErrorMessageType\r\n\t| AppStatusType\r\n\t| ReturnType<typeof setAppInitialized>\r\n\t| ReturnType<typeof setUser>\r\n\t| ReturnType<typeof setSuccessfulMessage>\r\nexport type AppErrorMessageType = ReturnType<typeof setAppErrorMessage>\r\nexport type AppStatusType = ReturnType<typeof setAppStatus>","import {Dispatch} from \"redux\";\r\nimport {UserDataType} from \"../../UI/components/RegistrationForm/RegistrationForm\";\r\nimport {authAPI} from \"../../DAL/api/authAPI\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\nimport {setAppErrorMessage} from \"./app-reducer\";\r\n\r\nconst REGISTRATION_REGISTER_USER = ' REGISTRATION/REGISTER_USER';\r\n\r\nconst initialState = {\r\n\tisRegistered: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase REGISTRATION_REGISTER_USER : {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisRegistered: action.isRegistered\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\n\r\n//Action creators\r\n\r\nconst userRegisteredAC = (isRegistered: boolean) => {\r\n\treturn {type: REGISTRATION_REGISTER_USER, isRegistered} as const\r\n}\r\n\r\n// Thanks\r\n\r\nexport const userRegisterTC = (userData: UserDataType) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.createUser(userData)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(userRegisteredAC(true))\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tdispatch(userRegisteredAC(false))\r\n\t\t\tdispatch(setAppErrorMessage(error.response.data.error))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof userRegisteredAC>","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {rootReducers} from \"../../../../BLL/store\";\r\nimport {setAppErrorMessage} from \"../../../../BLL/reducers/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const SnackbarError  = React.memo(() => {\r\n\tconst error = useSelector<rootReducers, string | null>(state => state.app.errorMessage);\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\t\tif (reason === 'clickaway') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(setAppErrorMessage(null));\r\n\t}\r\n\r\n\tconst isOpen = error !== null;\r\n\r\n\treturn (\r\n\t\t<Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n\t\t\t<Alert onClose={handleClose} severity={'error'}>\r\n\t\t\t\t{error}\r\n\t\t\t</Alert>\r\n\t\t</Snackbar>\r\n\t)\r\n})\r\n","import React from \"react\";\r\nimport classes from './RegistrationForm.module.scss';\r\nimport {Button, createStyles, FormControl, FormGroup, Grid, Paper, TextField, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useFormik} from \"formik\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Loading} from \"../../common/components-common/Loading/Loading\";\r\nimport {NavLink, Redirect,} from \"react-router-dom\";\r\nimport {userRegisterTC} from \"../../../BLL/reducers/registration-reducer\";\r\nimport {SnackbarError} from \"../../common/components-common/SnackbarError/SnackbarError\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tgrid: {\r\n\t\t\tmaxWidth: '600px',\r\n\t\t\twidth: '100%',\r\n\t\t\tmargin: '0 30px'\r\n\t\t},\r\n\t\tformControl: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tcontainer: {\r\n\t\t\theight: '100vh',\r\n\t\t},\r\n\t\tformGroup: {\r\n\t\t\talignItems: 'center'\r\n\t\t},\r\n\t\ttextField: {\r\n\t\t\twidth: '100%',\r\n\t\t\tpaddingBottom: '30px',\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\twidth: '100%',\r\n\t\t\tmarginBottom: '15px',\r\n\t\t},\r\n\t\tregistration: {\r\n\t\t\ttextAlign: 'center',\r\n\t\t},\r\n\t}),\r\n);\r\n\r\ntype FormikErrorType = {\r\n\temail?: string\r\n\tpassword?: string\r\n}\r\n\r\nexport type UserDataType = {\r\n\temail: string\r\n\tpassword: string\r\n}\r\n\r\nexport const RegistrationForm = React.memo(() => {\r\n\r\n\tconst styles = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst loading = useSelector<rootReducers, boolean>(state => state.profile.loading)\r\n\tconst isRegistered = useSelector<rootReducers, boolean>(state => state.registration.isRegistered)\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t},\r\n\t\tvalidate: (values: UserDataType) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'This field is required';\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address';\r\n\t\t\t} else if (!values.password) {\r\n\t\t\t\terrors.password = 'This field is required';\r\n\t\t\t} else if (values.password.length < 8) {\r\n\t\t\t\terrors.password = 'Password length should be at least 8 characters';\r\n\t\t\t}\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: (values, {resetForm}) => {\r\n\t\t\tdispatch(userRegisterTC(values))\r\n\t\t\tresetForm();\r\n\t\t},\r\n\t});\r\n\r\n\tif (isRegistered) {\r\n\t\treturn <Redirect to={'/Login'}/>\r\n\t}\r\n\tif (isSignIn) {\r\n\t\treturn <Redirect to={'/'}/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.registrationForm}>\r\n\t\t\t{loading && <Loading/>}\r\n\t\t\t<Title title={'Registration Form'}/>\r\n\t\t\t<Grid container justify={\"center\"} alignItems={'center'} className={styles.container}>\r\n\t\t\t\t<Grid item className={styles.grid}>\r\n\t\t\t\t\t<Paper elevation={3} style={{padding: '30px'}}>\r\n\t\t\t\t\t\t<div className={styles.registration}>\r\n\t\t\t\t\t\t\t<h2 style={{margin: '0 0 30px 0', color: '#666'}}>Please fill in all fields</h2>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<form className={classes.form} onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl className={styles.formControl}>\r\n\t\t\t\t\t\t\t\t<FormGroup className={styles.formGroup}>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"Email\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.email ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.email && <div className={classes.error}>{formik.errors.email}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type={'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"Password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.password ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.password && <div className={classes.error}>{formik.errors.password}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<Button type={'submit'} disabled={!(formik.isValid && formik.dirty)} variant={\"contained\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'primary'} className={styles.button}>Sign\r\n\t\t\t\t\t\t\t\t\t\tup</Button>\r\n\t\t\t\t\t\t\t\t\t<NavLink to={'/Login'} style={{textDecoration: 'none', width: '100%'}}>\r\n\t\t\t\t\t\t\t\t\t\t<Button style={{width: '100%'}} color={'secondary'} variant={\"contained\"}>Login</Button>\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<SnackbarError/>\r\n\t\t</div>\r\n\t)\r\n})","import React, {useCallback} from \"react\";\r\nimport classes from \"./Profile.module.scss\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {logoutTC} from \"../../../BLL/reducers/login-reducer\";\r\nimport containerStyle from '../../common/css/styles/container.module.scss';\r\nimport privatePhoto from '../../assets/images/private.jpeg';\r\nimport publicPhoto from '../../assets/images/publicItem.jpeg';\r\n\r\nexport const Profile = React.memo(() => {\r\n\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tdebugger\r\n\r\n\tconst logOutHandler = useCallback(() => {\r\n\t\tdispatch(logoutTC())\r\n\t}, [dispatch])\r\n\r\n\tif (!isSignIn) return <Redirect to={'/Login'}/>\r\n\r\n\treturn (\r\n\t\t<div className={classes.profile}>\r\n\t\t\t<Title title={'Welcome to Profile page'}/>\r\n\t\t\t<div className={containerStyle.container}>\r\n\t\t\t\t<div className={classes.profileContent}>\r\n\t\t\t\t\t<div className={classes.btn}>\r\n\t\t\t\t\t\t{isSignIn && <Button variant=\"contained\" color={\"secondary\"} onClick={logOutHandler}>Log out</Button>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className={classes.modules}>\r\n\t\t\t\t\t\t<div className={classes.module}>\r\n\t\t\t\t\t\t\t<img src={publicPhoto} alt=\"\"/>\r\n\t\t\t\t\t\t\t<NavLink to=\"/allModules\"><h2>Show all modules</h2></NavLink>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className={classes.module}>\r\n\t\t\t\t\t\t\t<img src={privatePhoto} alt=\"\"/>\r\n\t\t\t\t\t\t\t<NavLink to=\"/myModules\"><h2>Show only my modules</h2></NavLink>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\n","import React from \"react\";\r\nimport spinner from './spinner.svg'\r\n\r\nexport const Spinner = React.memo(()=> {\r\n  return (\r\n    <div style={{position: 'absolute',\r\n      zIndex: 2, bottom: '-50px', left: '50%',\r\n      transform: 'translateX(-50%)'}}>\r\n      <img src={spinner} alt=\"spinner\"/>\r\n    </div>\r\n  )\r\n})\r\n","import React from \"react\";\r\nimport {\r\n\tButton,\r\n\tCheckbox,\r\n\tcreateStyles,\r\n\tFormControl,\r\n\tFormControlLabel,\r\n\tFormGroup,\r\n\tGrid,\r\n\tPaper,\r\n\tTextField,\r\n\tTheme\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../../BLL/reducers/login-reducer\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Spinner} from \"../../common/components-common/spinner/Spinner\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\n\r\n\r\ntype LoginDataType = {\r\n\temail: string,\r\n\tpassword: string,\r\n\trememberMe: boolean\r\n}\r\n\r\ntype LoginErrorType = {\r\n\temail?: string,\r\n\tpassword?: string,\r\n\trememberMe?: boolean\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tgridItem: {\r\n\t\t\tposition: 'relative',\r\n\t\t\tzIndex: 1,\r\n\t\t\tmaxWidth: '400px',\r\n\t\t\twidth: '100%',\r\n\t\t\tpadding: '0 10px'\r\n\t\t},\r\n\t\tformControl: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tcontainer: {\r\n\t\t\theight: '100vh',\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tjustifyContent: 'center',\r\n\t\t\talignItems: 'center'\r\n\t\t},\r\n\t\tformLabel: {\r\n\t\t\tmargin: '0 0 10px 0'\r\n\t\t},\r\n\t\tinputBox: {\r\n\t\t\tposition: 'relative',\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\terrMessage: {\r\n\t\t\tposition: 'absolute',\r\n\t\t\tbottom: '6px',\r\n\t\t\tleft: '0',\r\n\t\t\tcolor: '#d82626',\r\n\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\tmargin: '0 0 10px 0'\r\n\t\t},\r\n\t\tsignUp: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tdisable: {\r\n\t\t\topacity: 0.5,\r\n\t\t\tpointerEvents: 'none'\r\n\t\t},\r\n\t\tenable: {\r\n\t\t\topacity: 1,\r\n\t\t\tpointerEvents: 'inherit'\r\n\t\t}\r\n\t}),\r\n)\r\n\r\nexport const Login = React.memo(() => {\r\n\r\n\tconst styles = useStyles()\r\n\tconst dispatch = useDispatch()\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst success = useSelector<rootReducers, boolean>(state => state.app.success)\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate: (values: LoginDataType) => {\r\n\t\t\tconst errors: LoginErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'This field is required';\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address';\r\n\t\t\t} else if (!values.password) {\r\n\t\t\t\terrors.password = 'This field is required';\r\n\t\t\t} else if (values.password.length < 8) {\r\n\t\t\t\terrors.password = 'Password should be at least 8 characters';\r\n\t\t\t}\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: (values, {resetForm}) => {\r\n\t\t\tdispatch(loginTC(values))\r\n\t\t\tresetForm();\r\n\t\t},\r\n\t})\r\n\r\n\tif (isSignIn) return <Redirect to={'/'}/>\r\n\r\n\t// const googleSignIn = () => {\r\n\t// \tconst _authOk = (googleUser: any) => {\r\n\t// \t\tconsole.log('Auth Ok', googleUser.getBasicProfile().getId())\r\n\t// \tgoogleUser.getBasicProfile().getId()\r\n\t// \t}\r\n\t// \tconst _authError = (googleUser: any) => {\r\n\t// \t\tconsole.log('Auth Error', googleUser)\r\n\t// \t}\r\n\t//\r\n\t// \t// @ts-ignore\r\n\t// \tconst GoogleAuth = window.gapi.auth2.getAuthInstance();\r\n\t// \tGoogleAuth.signIn(\r\n\t// \t\t{\r\n\t// \t\t\tscope: 'profile email'\r\n\t// \t\t}\r\n\t// \t).then(_authOk, _authError)\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Title title={'Login Form'}/>\r\n\t\t\t<Grid container className={styles.container}>\r\n\t\t\t\t<Grid item className={`${styles.gridItem} ${success ? styles.enable : styles.disable}`}>\r\n\t\t\t\t\t{!success && <Spinner/>}\r\n\t\t\t\t\t<Paper elevation={3} style={{padding: '30px'}}>\r\n\t\t\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl className={styles.formControl}>\r\n\t\t\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t\t\t<div className={styles.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField style={{width: '100%', paddingBottom: '30px'}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type={'email'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label={'Email'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant={\"outlined\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.email ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('email')}/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.email && <div className={styles.errMessage}>{formik.errors.email}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className={styles.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField style={{width: '100%', paddingBottom: '30px'}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type={'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label={'Password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant={\"outlined\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.password ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('password')}/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.password && <div className={styles.errMessage}>{formik.errors.password}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel className={styles.formLabel} label={'Remember me'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Get all props from checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// checked value must be taken from formik\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox color={'primary'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={formik.values.rememberMe}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<NavLink to={'/forgotPassword'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t style={{marginBottom: '10px', color: '#3f51b5'}}>Forgot Password?\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t\t<Button className={styles.button}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype={'submit'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'contained'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'primary'}>Sign In\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t<NavLink to={'/registration'}>\r\n\t\t\t\t\t\t\t\t\t\t<Button className={styles.signUp}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={'contained'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'secondary'}>Sign Up\r\n\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\t)\r\n})\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../DAL/api/authAPI\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\nimport {setAppErrorMessage} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n\tpasswordIsUpdated: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoveryPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"recoveryPassword/PASSWORD-IS-CONFIRMED\" : {\r\n\t\t\treturn {...state, passwordIsUpdated: action.value}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\n\r\n//Action creators\r\n\r\nconst updatePassword = (value: boolean) => {\r\n\treturn {type: 'recoveryPassword/PASSWORD-IS-CONFIRMED', value} as const\r\n}\r\n\r\n// Thanks\r\n\r\nexport const recoveryPasswordTC = (password: string, userId: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.setNewPassword(password, userId)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(updatePassword(true))\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tdispatch(setAppErrorMessage(error.response.data.error))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof updatePassword>","import React from \"react\";\r\nimport classes from './RecoveryPassword.module.scss';\r\nimport {Button, createStyles, FormControl, FormGroup, Grid, Paper, TextField, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useFormik} from \"formik\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Loading} from \"../../common/components-common/Loading/Loading\";\r\nimport {SnackbarError} from \"../../common/components-common/SnackbarError/SnackbarError\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {recoveryPasswordTC} from \"../../../BLL/reducers/recoveryPassword-reducer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tgrid: {\r\n\t\t\tmaxWidth: '400px',\r\n\t\t\twidth: '100%',\r\n\t\t\tmargin: '0 30px'\r\n\t\t},\r\n\t\tformControl: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tcontainer: {\r\n\t\t\theight: '100vh',\r\n\t\t},\r\n\t\tformGroup: {\r\n\t\t\talignItems: 'center'\r\n\t\t},\r\n\t\ttextField: {\r\n\t\t\twidth: '100%',\r\n\t\t\tpaddingBottom: '30px',\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\twidth: '100%',\r\n\t\t\tmarginBottom: '15px',\r\n\t\t},\r\n\t\tregistration: {\r\n\t\t\ttextAlign: 'center',\r\n\t\t},\r\n\t}),\r\n);\r\n\r\ntype FormikErrorType = {\r\n\tpassword?: string\r\n\tconfirmPassword?: string\r\n}\r\n\r\nexport type UserDataType = {\r\n\tpassword: string\r\n\tconfirmPassword: string\r\n}\r\n\r\nexport const RecoveryPassword = React.memo(() => {\r\n\r\n\tconst styles = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst loading = useSelector<rootReducers, boolean>(state => state.profile.loading)\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst passwordIsUpdated = useSelector<rootReducers, boolean>(state => state.recoveryPassword.passwordIsUpdated)\r\n\r\n\t// get userId from URl\r\n\tconst {userId} = useParams()\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tpassword: '',\r\n\t\t\tconfirmPassword: '',\r\n\t\t},\r\n\t\tvalidate: (values: UserDataType) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'This field is required';\r\n\t\t\t} else if (values.password.length < 8) {\r\n\t\t\t\terrors.password = 'Password length should be at least 8 characters';\r\n\t\t\t} else if (values.confirmPassword !== values.password) {\r\n\t\t\t\terrors.confirmPassword = 'Passwords must match'\r\n\t\t\t}\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: (values, {resetForm}) => {\r\n\t\t\tdispatch(recoveryPasswordTC(values.password, userId))\r\n\t\t\tresetForm()\r\n\t\t},\r\n\t});\r\n\r\n\tif (passwordIsUpdated) return <Redirect to={'/Login'}/>\r\n\tif (isSignIn) return <Redirect to={'/'}/>\r\n\r\n\treturn (\r\n\t\t<div className={classes.recoveryPassword}>\r\n\t\t\t{loading && <Loading/>}\r\n\t\t\t<Title title={'Recovery Password Form'}/>\r\n\t\t\t<Grid container justify={\"center\"} alignItems={'center'} className={styles.container}>\r\n\t\t\t\t<Grid item className={styles.grid}>\r\n\t\t\t\t\t<Paper elevation={3} style={{padding: '30px'}}>\r\n\t\t\t\t\t\t<form className={classes.form} onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl className={styles.formControl}>\r\n\t\t\t\t\t\t\t\t<FormGroup className={styles.formGroup}>\r\n\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type={'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"New password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.password ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.password && <div className={classes.error}>{formik.errors.password}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type={'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"Confirm password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.confirmPassword ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('confirmPassword')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.confirmPassword &&\r\n                    <div className={classes.error}>{formik.errors.confirmPassword}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<Button type={'submit'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={!(formik.isValid && formik.dirty)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={\"contained\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'primary'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.button}>Save password\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<SnackbarError/>\r\n\t\t</div>\r\n\t)\r\n})","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../DAL/api/authAPI\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\nimport {setAppErrorMessage, setSuccessfulMessage} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n\temailSentSuccessful: false,\r\n\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const forgotPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"forgotPassword/EMAIL-SET-SUCCESSFUL\" : {\r\n\t\t\treturn {...state, emailSentSuccessful: action.value}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\n//Action creators\r\n\r\nexport const emailSentSuccessfulAC = (value: boolean) => {\r\n\treturn {type: 'forgotPassword/EMAIL-SET-SUCCESSFUL', value} as const\r\n}\r\n\r\n// Thanks\r\n\r\nexport const forgotPasswordTC = (email: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.sendRecoveryEmail(email)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(emailSentSuccessfulAC(true))\r\n\t\t\tdispatch(setSuccessfulMessage(true))\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tdispatch(setAppErrorMessage(error.response.data.error))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof emailSentSuccessfulAC>","import React, {useCallback} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setSuccessfulMessage} from \"../../../../BLL/reducers/app-reducer\";\r\nimport {rootReducers} from \"../../../../BLL/store\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\ttypography: {\r\n\t\t\tpadding: theme.spacing(6),\r\n\t\t},\r\n\t}),\r\n);\r\n\r\nexport const SimplePopover = React.memo(() => {\r\n\tconst classes = useStyles();\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst isSuccessfulMessage = useSelector<rootReducers, boolean>(state => state.app.isSuccessfulMessage)\r\n\r\n\tconst handleClose = useCallback(() => {\r\n\t\tdispatch(setSuccessfulMessage(false))\r\n\t}, [dispatch])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Popover\r\n\t\t\t\topen={isSuccessfulMessage}\r\n\t\t\t\tonClose={handleClose}\r\n\t\t\t\tanchorOrigin={{vertical: 'center', horizontal: 'center',}}\r\n\t\t\t\ttransformOrigin={{vertical: 'center', horizontal: 'center',}}>\r\n\t\t\t\t<Typography style={{backgroundColor: '#3f51b5', color: '#fff'}} className={classes.typography}>Email was sent to\r\n\t\t\t\t\tyour address</Typography>\r\n\t\t\t</Popover>\r\n\t\t</div>\r\n\t);\r\n})","import React from \"react\";\r\nimport classes from './ForgotPassword.module.scss';\r\nimport {Button, createStyles, FormControl, FormGroup, Grid, Paper, TextField, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useFormik} from \"formik\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Loading} from \"../../common/components-common/Loading/Loading\";\r\nimport {SnackbarError} from \"../../common/components-common/SnackbarError/SnackbarError\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {forgotPasswordTC} from \"../../../BLL/reducers/forgotPassword-reducer\";\r\nimport {SimplePopover} from \"../../common/components-common/SimplePopover/SimplePopover\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tgrid: {\r\n\t\t\tmaxWidth: '400px',\r\n\t\t\twidth: '100%',\r\n\t\t\tmargin: '0 30px'\r\n\t\t},\r\n\t\tformControl: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tcontainer: {\r\n\t\t\theight: '100vh',\r\n\t\t},\r\n\t\tformGroup: {\r\n\t\t\talignItems: 'center'\r\n\t\t},\r\n\t\ttextField: {\r\n\t\t\twidth: '100%',\r\n\t\t\tpaddingBottom: '30px',\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\twidth: '100%',\r\n\t\t\tmarginBottom: '15px',\r\n\t\t},\r\n\t\tregistration: {\r\n\t\t\ttextAlign: 'center',\r\n\t\t},\r\n\t}),\r\n);\r\n\r\ntype FormikErrorType = {\r\n\temail?: string\r\n}\r\n\r\nexport type UserDataType = {\r\n\temail: string\r\n}\r\n\r\nexport const ForgotPassword = React.memo(() => {\r\n\r\n\tconst styles = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst loading = useSelector<rootReducers, boolean>(state => state.profile.loading)\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst isSuccessfulMessage = useSelector<rootReducers, boolean>(state => state.app.isSuccessfulMessage)\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: ''\r\n\t\t},\r\n\t\tvalidate: (values: UserDataType) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'This field is required';\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address';\r\n\t\t\t}\r\n\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: (values, {resetForm}) => {\r\n\t\t\tdispatch(forgotPasswordTC(values.email))\r\n\t\t\tresetForm()\r\n\t\t},\r\n\t});\r\n\r\n\tif (isSignIn) return <Redirect to={'/'}/>\r\n\r\n\treturn (\r\n\t\t<div className={classes.forgotPassword}>\r\n\t\t\t{loading && <Loading/>}\r\n\t\t\t<Title title={'Forgot Password Form'}/>\r\n\t\t\t<Grid container justify={\"center\"} alignItems={'center'} className={styles.container}>\r\n\t\t\t\t<Grid item className={styles.grid}>\r\n\t\t\t\t\t<Paper elevation={3} style={{padding: '30px'}}>\r\n\t\t\t\t\t\t<form className={classes.form} onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl className={styles.formControl}>\r\n\t\t\t\t\t\t\t\t<FormGroup className={styles.formGroup}>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"Write your email\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.email ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.email && <div className={classes.error}>{formik.errors.email}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<Button type={'submit'} disabled={!(formik.isValid && formik.dirty)} variant={\"contained\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'primary'} className={styles.button}>Send</Button>\r\n\t\t\t\t\t\t\t\t\t<NavLink to={'/Login'} style={{textDecoration: 'none', width: '100%'}}>\r\n\t\t\t\t\t\t\t\t\t\t<Button style={{width: '100%'}} color={'secondary'} variant={\"contained\"}>Login</Button>\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<SnackbarError/>\r\n\t\t\t{isSuccessfulMessage && <SimplePopover/>}\r\n\t\t</div>\r\n\t)\r\n})","import React from \"react\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\n\r\nconst progressStyle = {\r\n\tposition: 'absolute',\r\n\ttop: '50%',\r\n\tleft: '50%',\r\n\ttransform: 'translate(-50%,-50%)'\r\n} as const\r\n\r\nexport const CircleLoading = React.memo(() => {\r\n\treturn (\r\n\t\t<div style={progressStyle}>\r\n\t\t\t<CircularProgress/>\r\n\t\t</div>\r\n\t)\r\n})","import axios from 'axios'\r\n\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0',\r\n\twithCredentials: true\r\n})\r\n\r\nexport const cardsAPI = {\r\n\tgetCardsPack() {\r\n\t\treturn instance.get<ICardsPackResponse>('cards/pack')\r\n\t},\r\n\tgetMyModules(userId: string){\r\n\t\treturn instance.get<ICardsPackResponse>(`cards/pack&user_id=${userId}`)\r\n\t}\r\n}\r\n\r\n// types and interfaces\r\n\r\n\r\ninterface ICardsPackResponse{\r\n\tcardPacks: Array<ICardsPacks>\r\n\tcardPacksTotalCount: number // количество колод\r\n\tmaxCardsCount: number\r\n\tminCardsCount: number\r\n\tpage: number // выбранная страница\r\n\tpageCount: number // количество элементов на странице\r\n}\r\n\r\nexport interface ICardsPacks {\r\n\tcardsCount: number | null,\r\n\tcreated: string,\r\n\tgrade: number | null, //средняя оценка карточек\r\n\tmore_id: string,\r\n\tname: string,\r\n\tpath: string, // папка\r\n\tprivate: boolean,\r\n\trating: number | null, // лайки\r\n\tshots: number | null, // количество попыток\r\n\ttype: string, // ещё будет \"folder\" (папка)\r\n\tupdated: string,\r\n\tuser_id: string,\r\n\tuser_name: string,\r\n\t__v: number | null,\r\n\t_id: string,\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\nimport {cardsAPI, ICardsPacks} from \"../../DAL/api/cardsAPI\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<InitialStateType> = [\r\n\t{\r\n\t\tcardsCount: null,\r\n\t\tcreated: \"\",\r\n\t\tgrade: null, //средняя оценка карточек\r\n\t\tmore_id: \"\",\r\n\t\tname: \"\",\r\n\t\tpath: \"\", // папка\r\n\t\tprivate: false,\r\n\t\trating: null, // лайки\r\n\t\tshots: null, // количество попыток\r\n\t\ttype: \"\", // ещё будет \"folder\" (папка)\r\n\t\tupdated: \"\",\r\n\t\tuser_id: \"\",\r\n\t\tuser_name: \"\",\r\n\t\t__v: null,\r\n\t\t_id: \"\",\r\n\t}\r\n]\r\n\r\n\r\nexport const cardsPackReducer = (state: Array<InitialStateType> = initialState, action: ActionType): Array<InitialStateType> => {\r\n\tswitch (action.type) {\r\n\t\tcase \"cardsPack/SET-CARDS-PACK\": {\r\n\t\t\treturn [...action.cardsPacks]\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n\r\n//actions\r\n\r\nconst setCardsPackAC = (cardsPacks: Array<ICardsPacks>) => {\r\n\treturn {type: 'cardsPack/SET-CARDS-PACK', cardsPacks} as const\r\n}\r\n\r\n// thunks\r\n\r\nexport const getCardsPackTC = () => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tcardsAPI.getCardsPack()\r\n\t\t.then(res => {\r\n\t\t\tdispatch(setCardsPackAC(res.data.cardPacks))\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\thandleServerNetworkError(err, dispatch)\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n//types\r\n\r\ntype InitialStateType = {\r\n\tcardsCount: number | null,\r\n\tcreated: string,\r\n\tgrade: number | null, //средняя оценка карточек\r\n\tmore_id: string,\r\n\tname: string,\r\n\tpath: string, // папка\r\n\tprivate: boolean,\r\n\trating: number | null, // лайки\r\n\tshots: number | null, // количество попыток\r\n\ttype: string, // ещё будет \"folder\" (папка)\r\n\tupdated: string,\r\n\tuser_id: string,\r\n\tuser_name: string,\r\n\t__v: number | null,\r\n\t_id: string,\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setCardsPackAC>\r\n\r\n\r\n","import React, {useEffect, useMemo} from \"react\";\r\nimport classes from \"./CardsPack.module.scss\";\r\nimport {useTable} from \"react-table\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {getCardsPackTC} from \"../../../BLL/reducers/cardsPack-reducer\";\r\nimport {ICardsPacks} from \"../../../DAL/api/cardsAPI\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const CardsPack = React.memo(() => {\r\n\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst cardsPack = useSelector<rootReducers, Array<ICardsPacks>>(state => state.cardsPack)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\t// do query to the server to get all packs of cards (userID to get only private packs)\r\n\t\tdispatch(getCardsPackTC())\r\n\t}, [dispatch])\r\n\r\n\r\n\tconst data = useMemo(() => cardsPack, [cardsPack])\r\n\r\n\tconst columns = useMemo(() => [\r\n\t\t{\r\n\t\t\tHeader: 'Name',\r\n\t\t\taccessor: 'name'\r\n\t\t},\r\n\t\t{\r\n\t\t\tHeader: 'cardsCount',\r\n\t\t\taccessor: 'cardsCount'\r\n\t\t},\r\n\t\t{\r\n\t\t\tHeader: 'updated',\r\n\t\t\taccessor: 'updated'\r\n\t\t},\r\n\t\t{\r\n\t\t\tHeader: 'url',\r\n\t\t\taccessor: ''\r\n\t\t},\r\n\t], [])\r\n\r\n\tconst tableInstance = useTable<any>({columns, data})\r\n\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t} = tableInstance\r\n\r\n\tif (!isSignIn) return <Redirect to={'/Login'}/>\r\n\r\n\treturn (\r\n\t\t<table {...getTableProps()} className={classes.table}>\r\n\t\t\t<thead>\r\n\t\t\t{\r\n\t\t\t\theaderGroups.map(headerGroup => (\r\n\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\theaderGroup.headers.map(column => (\r\n\t\t\t\t\t\t\t\t<th {...column.getHeaderProps()}>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcolumn.render('Header')}\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t))}\r\n\t\t\t</thead>\r\n\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t{rows.map(row => {\r\n\t\t\t\tprepareRow(row)\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<tr {...row.getRowProps()}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trow.cells.map(cell => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<td {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tcell.render('Cell')}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t)\r\n})","import {Dispatch} from \"redux\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\nimport {cardsAPI, ICardsPacks} from \"../../DAL/api/cardsAPI\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<InitialStateType> = [\r\n\t{\r\n\t\tcardsCount: null,\r\n\t\tcreated: \"\",\r\n\t\tgrade: null, //средняя оценка карточек\r\n\t\tmore_id: \"\",\r\n\t\tname: \"\",\r\n\t\tpath: \"\", // папка\r\n\t\tprivate: false,\r\n\t\trating: null, // лайки\r\n\t\tshots: null, // количество попыток\r\n\t\ttype: \"\", // ещё будет \"folder\" (папка)\r\n\t\tupdated: \"\",\r\n\t\tuser_id: \"\",\r\n\t\tuser_name: \"\",\r\n\t\t__v: null,\r\n\t\t_id: \"\",\r\n\t}\r\n]\r\n\r\n\r\nexport const myModulesReducer = (state: Array<InitialStateType> = initialState, action: ActionType): Array<InitialStateType> => {\r\n\tswitch (action.type) {\r\n\t\tcase \"myModules/SET-CARDS-PACK\": {\r\n\t\t\treturn [...action.myModules]\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n\r\n//actions\r\n\r\nconst setMyModulesAC = (myModules: Array<ICardsPacks>) => {\r\n\treturn {type: 'myModules/SET-CARDS-PACK', myModules} as const\r\n}\r\n\r\n// thunks\r\n\r\nexport const getMyModulesTC = (userId: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tcardsAPI.getMyModules(userId)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(setMyModulesAC(res.data.cardPacks))\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\thandleServerNetworkError(err, dispatch)\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n//types\r\n\r\ntype InitialStateType = {\r\n\tcardsCount: number | null,\r\n\tcreated: string,\r\n\tgrade: number | null, //средняя оценка карточек\r\n\tmore_id: string,\r\n\tname: string,\r\n\tpath: string, // папка\r\n\tprivate: boolean,\r\n\trating: number | null, // лайки\r\n\tshots: number | null, // количество попыток\r\n\ttype: string, // ещё будет \"folder\" (папка)\r\n\tupdated: string,\r\n\tuser_id: string,\r\n\tuser_name: string,\r\n\t__v: number | null,\r\n\t_id: string,\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setMyModulesAC>\r\n\r\n\r\n","import React, {useEffect, useMemo} from \"react\";\r\nimport classes from \"./MyModules.module.scss\";\r\nimport {useTable} from \"react-table\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {ICardsPacks} from \"../../../DAL/api/cardsAPI\";\r\nimport {getMyModulesTC} from \"../../../BLL/reducers/myModules-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const MyModules = React.memo(() => {\r\n\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst userId = useSelector<rootReducers, string>(state => state.login._id)\r\n\tconst cardsPack = useSelector<rootReducers, Array<ICardsPacks>>(state => state.myModules)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseEffect(() => {\r\n\t\t// do query to the server to get all packs of cards (userID to get only private packs)\r\n\t\tdispatch(getMyModulesTC(userId))\r\n\t}, [userId, dispatch])\r\n\r\n\r\n\tconst data = useMemo(() => cardsPack, [cardsPack])\r\n\r\n\tconst columns = useMemo(() => [\r\n\t\t{\r\n\t\t\tHeader: 'Name',\r\n\t\t\taccessor: 'name'\r\n\t\t},\r\n\t\t{\r\n\t\t\tHeader: 'cardsCount',\r\n\t\t\taccessor: 'cardsCount'\r\n\t\t},\r\n\t\t{\r\n\t\t\tHeader: 'updated',\r\n\t\t\taccessor: 'updated'\r\n\t\t},\r\n\t\t{\r\n\t\t\tHeader: 'url',\r\n\t\t\taccessor: ''\r\n\t\t},\r\n\t], [])\r\n\r\n\tconst tableInstance = useTable<any>({columns, data})\r\n\r\n\tconst {\r\n\t\tgetTableProps,\r\n\t\tgetTableBodyProps,\r\n\t\theaderGroups,\r\n\t\trows,\r\n\t\tprepareRow,\r\n\t} = tableInstance\r\n\r\n\tif (!isSignIn) return <Redirect to={'/Login'}/>\r\n\r\n\treturn (\r\n\t\t<table {...getTableProps()} className={classes.table}>\r\n\t\t\t<thead>\r\n\t\t\t{\r\n\t\t\t\theaderGroups.map(headerGroup => (\r\n\t\t\t\t\t<tr {...headerGroup.getHeaderGroupProps()}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\theaderGroup.headers.map(column => (\r\n\t\t\t\t\t\t\t\t<th {...column.getHeaderProps()}>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcolumn.render('Header')}\r\n\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t))}\r\n\t\t\t</thead>\r\n\t\t\t<tbody {...getTableBodyProps()}>\r\n\t\t\t{rows.map(row => {\r\n\t\t\t\tprepareRow(row)\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<tr {...row.getRowProps()}>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trow.cells.map(cell => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<td {...cell.getCellProps()}>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tcell.render('Cell')}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t\t</tbody>\r\n\t\t</table>\r\n\t)\r\n})","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"./BLL/store\";\r\nimport {RegistrationForm} from \"./UI/components/RegistrationForm/RegistrationForm\";\r\nimport {Profile} from \"./UI/components/Profile/Profile\";\r\nimport {Login} from \"./UI/components/Login/Login\";\r\nimport {RecoveryPassword} from \"./UI/components/RecoveryPassword/RecoveryPassword\";\r\nimport {ForgotPassword} from './UI/components/ForgotPassword/FogotPassword';\r\nimport {initializeAppTC} from \"./BLL/reducers/app-reducer\";\r\nimport {CircleLoading} from \"./UI/common/components-common/Loading/CircleLoading\";\r\nimport {CardsPack} from \"./UI/components/CardsPack/CardsPack\";\r\nimport {MyModules} from \"./UI/components/MyModules/MyModules\";\r\n\r\nconst App = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst isInitialized = useSelector<rootReducers, boolean>(state => state.app.isInitialized)\r\n\r\n\t// initialize our whole app (sending query to the server if we logged in or not)\r\n\tuseEffect(() => {\r\n\t\tdispatch(initializeAppTC())\r\n\t\t// @ts-ignore\r\n\t\t// window.gapi.load('auth2', function() {\r\n\t\t// \t// @ts-ignore\r\n\t\t// \twindow.gapi.auth2.init({\r\n\t\t// \t\tclient_id: '192242024154-3lqo1cg32i5v14jedhhrtrn0ima9jjap.apps.googleusercontent.com'\r\n\t\t// \t}).then(()=> console.log('OK'), ()=>{console.log('Error1')})\r\n\t\t// });\r\n\r\n\t}, [dispatch])\r\n\r\n\tif (!isInitialized) return <CircleLoading/>\r\n\r\n\treturn (\r\n\t\t<HashRouter>\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Route exact path={'/'} render={() => <Profile/>}/>\r\n\t\t\t\t<Route path={'/registration'} render={() => <RegistrationForm/>}/>\r\n\t\t\t\t<Route path={'/Login'} render={() => <Login/>}/>\r\n\t\t\t\t<Route path={'/forgotPassword'} render={() => <ForgotPassword/>}/>\r\n\t\t\t\t<Route path={'/recovery/:userId'} render={() => <RecoveryPassword/>}/>\r\n\t\t\t\t<Route path={'/allModules'} render={() => <CardsPack/>}/> {/*Public packs*/}\r\n\t\t\t\t<Route path={'/myModules'} render={() => <MyModules/>}/> {/*Private packs*/}\r\n\t\t\t</div>\r\n\t\t</HashRouter>\r\n\t);\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('SnackbarError during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nconst initialState = {\r\n\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const cardsCardReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n\tswitch (action.type){\r\n\r\n\t\tdefault: return state\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\n//types\r\n\r\ntype ActionType = {type: ''}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {profileReducer} from \"./reducers/profile-reducer\";\r\nimport {registrationReducer} from \"./reducers/registration-reducer\";\r\nimport {loginReducer} from \"./reducers/login-reducer\";\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {recoveryPasswordReducer} from \"./reducers/recoveryPassword-reducer\";\r\nimport {forgotPasswordReducer} from \"./reducers/forgotPassword-reducer\";\r\nimport {cardsPackReducer} from \"./reducers/cardsPack-reducer\";\r\nimport {cardsCardReducer} from \"./reducers/cardsCard-reducer\";\r\nimport {myModulesReducer} from \"./reducers/myModules-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n\tprofile: profileReducer,\r\n\tregistration: registrationReducer,\r\n\tlogin: loginReducer,\r\n\tapp: appReducer,\r\n\trecoveryPassword: recoveryPasswordReducer,\r\n\tforgotPassword: forgotPasswordReducer,\r\n\tcardsPack: cardsPackReducer,\r\n\tmyModules: myModulesReducer,\r\n\tcardsCard: cardsCardReducer\r\n})\r\n\r\nexport type rootReducers = ReturnType<typeof reducers>\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./BLL/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n    <App />\r\n\t</Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationForm\":\"RegistrationForm_registrationForm___mcIv\",\"inputBox\":\"RegistrationForm_inputBox__1KGpA\",\"error\":\"RegistrationForm_error__2bM7-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContent\":\"Profile_profileContent__12fFa\",\"btn\":\"Profile_btn__1bBM3\",\"modules\":\"Profile_modules__3NNqd\",\"module\":\"Profile_module__Y35RB\",\"loading\":\"Profile_loading__3GbAF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recoveryPassword\":\"RecoveryPassword_recoveryPassword__QCnqF\",\"inputBox\":\"RecoveryPassword_inputBox__3h1TK\",\"error\":\"RecoveryPassword_error__1A7ZL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPassword\":\"ForgotPassword_forgotPassword__3kUX3\",\"inputBox\":\"ForgotPassword_inputBox__tYNiZ\",\"error\":\"ForgotPassword_error__1KoeN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1RTB2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_container__1jjuF\"};","module.exports = __webpack_public_path__ + \"static/media/private.21d4fcd9.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/publicItem.c596a2a4.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/spinner.cceb1073.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"CardsPack_table__1dWSd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"MyModules_table__38-fx\"};"],"sourceRoot":""}