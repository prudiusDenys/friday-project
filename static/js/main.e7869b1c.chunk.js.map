{"version":3,"sources":["UI/common/components-common/Title/Title.tsx","UI/common/components-common/Loading/Loading.tsx","DAL/api/authAPI.ts","BLL/reducers/profile-reducer.ts","utils/error-utils.ts","BLL/reducers/login-reducer.ts","BLL/reducers/app-reducer.ts","BLL/reducers/registration-reducer.ts","UI/common/components-common/SnackbarError/SnackbarError.tsx","UI/components/RegistrationForm/RegistrationForm.tsx","UI/components/Profile/Profile.tsx","UI/common/components-common/spinner/Spinner.tsx","UI/components/Login/Login.tsx","BLL/reducers/recoveryPassword-reducer.ts","UI/components/RecoveryPassword/RecoveryPassword.tsx","BLL/reducers/forgotPassword-reducer.ts","UI/common/components-common/SimplePopover/SimplePopover.tsx","UI/components/ForgotPassword/FogotPassword.tsx","UI/common/components-common/Loading/CircleLoading.tsx","App.tsx","serviceWorker.ts","BLL/store.ts","index.tsx","UI/components/RegistrationForm/RegistrationForm.module.scss","UI/components/RecoveryPassword/RecoveryPassword.module.scss","UI/components/ForgotPassword/ForgotPassword.module.scss","UI/components/Profile/Profile.module.scss","UI/common/components-common/Title/Title.module.scss","UI/common/css/styles/container.module.scss","UI/common/components-common/spinner/spinner.svg"],"names":["Title","React","memo","title","className","classes","useStyles","makeStyles","theme","createStyles","loading","position","top","left","zIndex","width","Loading","styles","LinearProgress","instance","axios","create","baseURL","withCredentials","authAPI","userData","post","data","delete","email","from","message","password","userId","resetPasswordToken","initialState","status","error","isInitialized","setLoadingAC","loadingStatus","type","handleServerNetworkError","dispatch","errorMessage","response","setAppErrorMessage","initState","isSignIn","success","isSuccessfulMessage","setSuccessfulMessage","value","setAppStatus","isRegistered","userRegisteredAC","Alert","props","elevation","variant","SnackbarError","useSelector","state","app","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","grid","maxWidth","margin","formControl","container","height","formGroup","alignItems","textField","paddingBottom","button","marginBottom","registration","textAlign","RegistrationForm","profile","login","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","then","res","catch","finally","to","registrationForm","Grid","justify","item","Paper","style","padding","form","handleSubmit","FormControl","FormGroup","inputBox","TextField","label","undefined","getFieldProps","Button","disabled","isValid","dirty","color","textDecoration","Profile","logOutHandler","useCallback","err","containerStyle","profileContent","btn","onClick","Spinner","bottom","transform","src","spinner","alt","Login","gridItem","display","justifyContent","formLabel","errMessage","signUp","disable","opacity","pointerEvents","enable","rememberMe","setUser","FormControlLabel","control","Checkbox","checked","passwordIsUpdated","RecoveryPassword","recoveryPassword","useParams","confirmPassword","resetForm","recoveryPasswordTC","emailSentSuccessful","typography","spacing","SimplePopover","Popover","anchorOrigin","vertical","horizontal","transformOrigin","Typography","backgroundColor","ForgotPassword","forgotPassword","progressStyle","CircleLoading","CircularProgress","App","useEffect","exact","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.e7869b1c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Title.module.scss\";\r\n\r\ntype PropsType = {\r\n\ttitle: string\r\n}\r\n\r\nexport const Title = React.memo(({title} : PropsType) => {\r\n\treturn (\r\n\t\t<div className={classes.title}>\r\n\t\t\t<h1>{title}</h1>\r\n\t\t</div>\r\n\t)\r\n})","import React from \"react\";\r\nimport {createStyles, LinearProgress, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tloading:{\r\n\t\t\tposition: 'absolute',\r\n\t\t\ttop: '80px',\r\n\t\t\tleft: '0',\r\n\t\t\tzIndex: 1,\r\n\t\t\twidth: '100%'\r\n\t\t}\r\n\t}),\r\n);\r\n\r\nexport const Loading = React.memo(() => {\r\n\tconst styles = useStyles();\r\n\treturn <LinearProgress className={styles.loading}/>\r\n})","import axios from 'axios'\r\nimport {UserDataType} from \"../../UI/components/RegistrationForm/RegistrationForm\";\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n\twithCredentials: true\r\n})\r\n\r\nexport const authAPI = {\r\n\tcreateUser(userData: UserDataType) {\r\n\t\treturn instance.post<ICreateUser>('auth/register', userData)\r\n\t},\r\n\tlogin(data: LoginParamsType) {\r\n\t\treturn instance.post<IResponseLogin>(`auth/login`, data)\r\n\t},\r\n\tme() {\r\n\t\treturn instance.post<IResponseMe>('auth/me', {})\r\n\t},\r\n\tlogout() {\r\n\t\treturn instance.delete<{ info: string, error: string }>('auth/me')\r\n\t},\r\n\tsendRecoveryEmail(email: string) {\r\n\t\treturn instance.post<{ info: string, error: string }>('auth/forgot', {\r\n\t\t\temail: email,\r\n\t\t\tfrom: 'testdenis12345@gmail.com',\r\n\t\t\tmessage: `<div style=\"background-color: lime; padding: 15px\"> \r\n\t\t\t\t\tpassword recovery link: \t\r\n\t\t\t\t\t<a href='https://prudiusdenys.github.io/friday-project/#/recovery/$token$'>link</a></div>`\r\n\t\t})\r\n\t},\r\n\tsetNewPassword(password: string, userId: string) {\r\n\t\treturn instance.post<{ info: string, error: string }>('auth/set-new-password', {password: password, resetPasswordToken: userId\t})\r\n\t}\r\n}\r\n\r\n// types and interfaces\r\n\r\n// common interface\r\ninterface IResponse{\r\n\tcreated: string\r\n\temail: string\r\n\tisAdmin: boolean\r\n\tname: string\r\n\trememberMe: boolean\r\n\tupdated: string\r\n\tverified: boolean\r\n\t_id: string\r\n\tpublicCardPacksCount: number // количество колод\r\n}\r\n\r\ninterface ICreateUser{\r\n\taddedUser : IResponse\r\n\tsuccess: boolean\r\n}\r\n\r\nexport interface IResponseLogin extends IResponse  {\r\n\tavatar?: string\r\n\ttoken?: string,\r\n\ttokenDeathTime?: number\r\n\terror: string | null,\r\n}\r\n\r\nexport type LoginParamsType = {\r\n\temail: string\r\n\tpassword: string\r\n\trememberMe: boolean\r\n}\r\n\r\ninterface IResponseMe extends IResponse{\r\n\tavatar?: string\r\n\terror: string\r\n}","import {Dispatch} from \"redux\";\r\n\r\nconst PROFILE_SET_LOADING = 'PROFILE_SET_LOADING';\r\n\r\nconst initialState: InitialStateType = {\r\n\tstatus: 'idle',\r\n\terror: null,\r\n\tisInitialized: false,\r\n\tloading: false\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType):InitialStateType  => {\r\n\tswitch (action.type) {\r\n\t\tcase PROFILE_SET_LOADING: {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: action.loadingStatus\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\n\r\n//Action creators\r\n\r\nexport const setLoadingAC = (loadingStatus: boolean) => {\r\n\treturn {type: PROFILE_SET_LOADING, loadingStatus}\r\n}\r\n\r\n// Thanks\r\n\r\nexport const setLoadingTC = (loadingStatus: boolean) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(loadingStatus))\r\n}\r\n\r\n// types\r\n\r\ntype InitialStateType = {\r\n\tstatus: 'idle' | 'success' | 'failed',\r\n\terror: null | string,\r\n\tisInitialized: boolean,\r\n\tloading: boolean\r\n}\r\ntype ActionsType = ReturnType<typeof setLoadingAC>","import {Dispatch} from \"redux\";\r\nimport {AppErrorMessageType, setAppErrorMessage} from \"../BLL/reducers/app-reducer\";\r\n\r\nexport const handleServerNetworkError = (error: ServerErrorType, dispatch: DispatchType) => {\r\n\tconst errorMessage = error.response.data.error ? error.response.data.error : 'Some error :('\r\n\tdispatch(setAppErrorMessage(errorMessage))\r\n}\r\n\r\ntype DispatchType = Dispatch<AppErrorMessageType>\r\ntype ServerErrorType = {response:{data:{error: string}}}","import {Dispatch} from \"redux\";\r\nimport {LoginParamsType, authAPI, IResponseLogin} from \"../../DAL/api/authAPI\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\n\r\nconst initState: StateType = {\r\n\tisSignIn: false,\r\n}\r\n\r\nexport const loginReducer = (state: StateType = initState, action: ActionType): StateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"Login/IS-SIGN-IN\": {\r\n\t\t\treturn {...state, isSignIn: action.isSignIn}\r\n\t\t}\r\n\t\tcase \"Login/SET-USER\": {\r\n\t\t\treturn {...state, ...action.data}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// Action\r\n\r\nexport const isSignIn = (isSignIn: boolean) => ({type: 'Login/IS-SIGN-IN', isSignIn} as const)\r\nexport const setUser = (data: IResponseLogin) => ({type: 'Login/SET-USER', data} as const)\r\n\r\n// Thunk\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n\tdispatch(setAppStatus(false))\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.login(data)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(isSignIn(true))\r\n\t\t\tdispatch(setUser(res.data))\r\n\t\t\tdispatch(setAppStatus(true))\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\thandleServerNetworkError(err, dispatch)\r\n\t\t\tdispatch(setAppStatus(true))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.logout()\r\n\t\t.then(res => {\r\n\t\t\tdispatch(isSignIn(false))\r\n\t\t})\r\n\t\t.catch(err => {\r\n\t\t\thandleServerNetworkError(err, dispatch)\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n// Types\r\n\r\ntype StateType = { isSignIn: boolean }\r\ntype ActionType = IsSignInType | ReturnType<typeof setUser>\r\ntype IsSignInType = ReturnType<typeof isSignIn>","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../DAL/api/authAPI\";\r\nimport {isSignIn, setUser} from \"./login-reducer\";\r\n\r\nconst initState: StateType = {\r\n\terrorMessage: null,\r\n\tsuccess: true,\r\n\tisInitialized: false,\r\n\tisSuccessfulMessage: false\r\n}\r\n\r\nexport const appReducer = (state: StateType = initState, action: ActionType): StateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"app/SET-STATUS\": {\r\n\t\t\treturn {...state, success: action.success}\r\n\t\t}\r\n\t\tcase \"app/SET-ERROR-MESSAGE\": {\r\n\t\t\treturn {...state, errorMessage: action.errorMessage}\r\n\t\t}\r\n\t\tcase \"app/SET-APP-INITIALIZED\": {\r\n\t\t\treturn {...state, isInitialized: action.value}\r\n\t\t}\r\n\t\tcase \"app/SET-SUCCESS-MESSAGE\": {\r\n\t\t\treturn {...state, isSuccessfulMessage: action.value}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// Action\r\nexport const setAppErrorMessage = (errorMessage: string | null) => {\r\n\treturn {type: 'app/SET-ERROR-MESSAGE', errorMessage} as const\r\n}\r\nexport const setAppInitialized = (value: boolean) => {\r\n\treturn {type: 'app/SET-APP-INITIALIZED', value} as const\r\n}\r\nexport const setSuccessfulMessage = (value: boolean) => {\r\n\treturn {type: 'app/SET-SUCCESS-MESSAGE', value} as const\r\n}\r\n\r\nexport const setAppStatus = (success: boolean) => ({type: 'app/SET-STATUS', success} as const)\r\n// Thunk\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\tauthAPI.me()\r\n\t\t.then(res => {\r\n\t\t\tdispatch(isSignIn(true))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setAppInitialized(true)))\r\n}\r\n\r\n// Types\r\ntype StateType = {\r\n\terrorMessage: string | null\r\n\tsuccess: boolean,\r\n\tisInitialized: boolean\r\n\tisSuccessfulMessage: boolean\r\n}\r\n\r\ntype ActionType = AppErrorMessageType\r\n\t| AppStatusType\r\n\t| ReturnType<typeof setAppInitialized>\r\n\t| ReturnType<typeof setUser>\r\n\t| ReturnType<typeof setSuccessfulMessage>\r\nexport type AppErrorMessageType = ReturnType<typeof setAppErrorMessage>\r\nexport type AppStatusType = ReturnType<typeof setAppStatus>","import {Dispatch} from \"redux\";\r\nimport {UserDataType} from \"../../UI/components/RegistrationForm/RegistrationForm\";\r\nimport {authAPI} from \"../../DAL/api/authAPI\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\nimport {setAppErrorMessage} from \"./app-reducer\";\r\n\r\nconst REGISTRATION_REGISTER_USER = ' REGISTRATION/REGISTER_USER';\r\n\r\nconst initialState = {\r\n\tisRegistered: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase REGISTRATION_REGISTER_USER : {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisRegistered: action.isRegistered\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\n\r\n//Action creators\r\n\r\nconst userRegisteredAC = (isRegistered: boolean) => {\r\n\treturn {type: REGISTRATION_REGISTER_USER, isRegistered} as const\r\n}\r\n\r\n// Thanks\r\n\r\nexport const userRegisterTC = (userData: UserDataType) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.createUser(userData)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(userRegisteredAC(true))\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tdispatch(userRegisteredAC(false))\r\n\t\t\tdispatch(setAppErrorMessage(error.response.data.error))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof userRegisteredAC>","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {rootReducers} from \"../../../../BLL/store\";\r\nimport {setAppErrorMessage} from \"../../../../BLL/reducers/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const SnackbarError  = React.memo(() => {\r\n\tconst error = useSelector<rootReducers, string | null>(state => state.app.errorMessage);\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\t\tif (reason === 'clickaway') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tdispatch(setAppErrorMessage(null));\r\n\t}\r\n\r\n\tconst isOpen = error !== null;\r\n\r\n\treturn (\r\n\t\t<Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n\t\t\t<Alert onClose={handleClose} severity={'error'}>\r\n\t\t\t\t{error}\r\n\t\t\t</Alert>\r\n\t\t</Snackbar>\r\n\t)\r\n})\r\n","import React from \"react\";\r\nimport classes from './RegistrationForm.module.scss';\r\nimport {Button, createStyles, FormControl, FormGroup, Grid, Paper, TextField, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useFormik} from \"formik\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Loading} from \"../../common/components-common/Loading/Loading\";\r\nimport {NavLink, Redirect, } from \"react-router-dom\";\r\nimport {userRegisterTC} from \"../../../BLL/reducers/registration-reducer\";\r\nimport {SnackbarError} from \"../../common/components-common/SnackbarError/SnackbarError\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tgrid: {\r\n\t\t\tmaxWidth: '600px',\r\n\t\t\twidth: '100%',\r\n\t\t\tmargin: '0 30px'\r\n\t\t},\r\n\t\tformControl: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tcontainer: {\r\n\t\t\theight: '100vh',\r\n\t\t},\r\n\t\tformGroup: {\r\n\t\t\talignItems: 'center'\r\n\t\t},\r\n\t\ttextField: {\r\n\t\t\twidth: '100%',\r\n\t\t\tpaddingBottom: '30px',\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\twidth: '100%',\r\n\t\t\tmarginBottom: '15px',\r\n\t\t},\r\n\t\tregistration: {\r\n\t\t\ttextAlign: 'center',\r\n\t\t},\r\n\t}),\r\n);\r\n\r\ntype FormikErrorType = {\r\n\temail?: string\r\n\tpassword?: string\r\n}\r\n\r\nexport type UserDataType = {\r\n\temail: string\r\n\tpassword: string\r\n}\r\n\r\nexport const RegistrationForm = React.memo(() => {\r\n\r\n\tconst styles = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst loading = useSelector<rootReducers, boolean>(state => state.profile.loading)\r\n\tconst isRegistered = useSelector<rootReducers, boolean>(state => state.registration.isRegistered)\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t},\r\n\t\tvalidate: (values: UserDataType) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'This field is required';\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address';\r\n\t\t\t}\r\n\t\t\telse if (!values.password) {\r\n\t\t\t\terrors.password = 'This field is required';\r\n\t\t\t} else if (values.password.length < 8) {\r\n\t\t\t\terrors.password = 'Password length should be at least 8 characters';\r\n\t\t\t}\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(userRegisterTC(values))\r\n\t\t},\r\n\t});\r\n\r\n\tif(isRegistered){\r\n\t\treturn <Redirect to={'/Login'}/>\r\n\t}\r\n\tif(isSignIn){\r\n\t\treturn <Redirect to={'/'}/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.registrationForm}>\r\n\t\t\t{loading && <Loading/>}\r\n\t\t\t<Title title={'Registration Form'}/>\r\n\t\t\t<Grid container justify={\"center\"} alignItems={'center'} className={styles.container}>\r\n\t\t\t\t<Grid item className={styles.grid}>\r\n\t\t\t\t\t<Paper elevation={3} style={{padding: '30px'}}>\r\n\t\t\t\t\t\t<div className={styles.registration}>\r\n\t\t\t\t\t\t\t<h2 style={{margin: '0 0 30px 0'}}>Please fill in all fields</h2>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<form className={classes.form} onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl className={styles.formControl}>\r\n\t\t\t\t\t\t\t\t<FormGroup className={styles.formGroup}>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"Email\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.email ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.email && <div className={classes.error}>{formik.errors.email}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type={'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"Password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.password ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.password && <div className={classes.error}>{formik.errors.password}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<Button type={'submit'} disabled={!(formik.isValid && formik.dirty)} variant={\"contained\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'primary'} className={styles.button}>Sign\r\n\t\t\t\t\t\t\t\t\t\tup</Button>\r\n\t\t\t\t\t\t\t\t\t<NavLink to={'/Login'} style={{textDecoration: 'none', width: '100%'}}>\r\n\t\t\t\t\t\t\t\t\t\t<Button style={{width: '100%'}} color={'secondary'} variant={\"contained\"}>Login</Button>\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<SnackbarError/>\r\n\t\t</div>\r\n\t)\r\n})","import React, {useCallback} from \"react\";\r\nimport classes from \"./Profile.module.scss\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {logoutTC} from \"../../../BLL/reducers/login-reducer\";\r\nimport containerStyle from '../../common/css/styles/container.module.scss';\r\n\r\nexport const Profile = React.memo(() => {\r\n\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst logOutHandler = useCallback(() => {\r\n\t\tdispatch(logoutTC())\r\n\t},[dispatch])\r\n\r\n\tif (!isSignIn) return <Redirect to={'/Login'}/>\r\n\r\n\treturn (\r\n\t\t<div className={classes.profile}>\r\n\t\t\t<div className={containerStyle.container}>\r\n\t\t\t\t<div className={classes.profileContent}>\r\n\t\t\t\t\t<Title title={'Welcome to Profile page'}/>\r\n\t\t\t\t\t<div className={classes.btn}>\r\n\t\t\t\t\t\t{isSignIn  && <Button variant=\"contained\" color={\"secondary\"} onClick={logOutHandler}>Log out</Button>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\n","import React from \"react\";\r\nimport spinner from './spinner.svg'\r\n\r\nexport const Spinner = React.memo(()=> {\r\n  return (\r\n    <div style={{position: 'absolute',\r\n      zIndex: 2, bottom: '-50px', left: '50%',\r\n      transform: 'translateX(-50%)'}}>\r\n      <img src={spinner} alt=\"spinner\"/>\r\n    </div>\r\n  )\r\n})\r\n","import React from \"react\";\r\nimport {\r\n\tButton,\r\n\tCheckbox,\r\n\tcreateStyles,\r\n\tFormControl,\r\n\tFormControlLabel,\r\n\tFormGroup,\r\n\tGrid, Paper,\r\n\tTextField,\r\n\tTheme\r\n} from \"@material-ui/core\";\r\nimport {useFormik} from \"formik\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../../BLL/reducers/login-reducer\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Spinner} from \"../../common/components-common/spinner/Spinner\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\n\r\nexport const Login = React.memo(()=> {\r\n\r\n\tconst useStyles = makeStyles((theme: Theme) =>\r\n\t\tcreateStyles({\r\n\t\t\tgridItem: {\r\n\t\t\t\tposition: 'relative',\r\n\t\t\t\tzIndex: 1,\r\n\t\t\t\tmaxWidth: '400px',\r\n\t\t\t\twidth: '100%',\r\n\t\t\t\tpadding: '0 10px'\r\n\t\t\t},\r\n\t\t\tformControl: {\r\n\t\t\t\twidth: '100%'\r\n\t\t\t},\r\n\t\t\tcontainer: {\r\n\t\t\t\theight: '100vh',\r\n\t\t\t\tdisplay: 'flex',\r\n\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\talignItems: 'center'\r\n\t\t\t},\r\n\t\t\tformLabel: {\r\n\t\t\t\tmargin: '10px 0 10px 0'\r\n\t\t\t},\r\n\t\t\terrMessage: {\r\n\t\t\t\tcolor: '#d82626'\r\n\t\t\t},\r\n\t\t\tbutton: {\r\n\t\t\t\tmargin: '0 0 10px 0'\r\n\t\t\t},\r\n\t\t\tsignUp: {\r\n\t\t\t\twidth: '100%'\r\n\t\t\t},\r\n\t\t\tdisable: {\r\n\t\t\t\topacity: 0.5,\r\n\t\t\t\tpointerEvents: 'none'\r\n\t\t\t},\r\n\t\t\tenable: {\r\n\t\t\t\topacity: 1,\r\n\t\t\t\tpointerEvents: 'inherit'\r\n\t\t\t}\r\n\t\t}),\r\n\t)\r\n\tconst styles = useStyles()\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst success = useSelector<rootReducers, boolean>(state => state.app.success)\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\trememberMe: false\r\n\t\t},\r\n\t\tvalidate: values => {\r\n\t\t\tif (!values.email) return {email: 'Email is required!'}\r\n\t\t\tif (!values.password) return {password: 'Password is required!'}\r\n\t\t\tif (values.password.length <= 6) return {password: 'Password should be more than 5 symbols'}\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(loginTC(values))\r\n\t\t},\r\n\t})\r\n\r\n\tif (isSignIn) return <Redirect to={'/'}/>\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Title title={'Login Form'}/>\r\n\t\t\t<Grid container className={styles.container}>\r\n\t\t\t\t<Grid item className={`${styles.gridItem} ${success ? styles.enable : styles.disable}`}>\r\n\t\t\t\t\t{!success && <Spinner/>}\r\n\t\t\t\t\t<Paper elevation={3} style={{padding: '30px'}}>\r\n\t\t\t\t\t\t{/*Hook useFormik gives handleSubmit function to take all form's values*/}\r\n\t\t\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl className={styles.formControl}>\r\n\t\t\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t\t\t<TextField type={'email'} label={'Email'} margin={'normal'}\r\n\t\t\t\t\t\t\t\t\t\t// Get all props from email\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{/*Get an error message if email is not valid*/}\r\n\t\t\t\t\t\t\t\t\t{formik.errors.email && <div className={styles.errMessage}>{formik.errors.email}</div>}\r\n\t\t\t\t\t\t\t\t\t<TextField type={'password'} label={'Password'} margin={'normal'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t{formik.errors.password && <div className={styles.errMessage}>{formik.errors.password}</div>}\r\n\t\t\t\t\t\t\t\t\t<FormControlLabel className={styles.formLabel} label={'Remember me'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Get all props from checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// checked value must be taken from formik\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox color={'primary'} checked={formik.values.rememberMe}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<NavLink to={'/forgotPassword'} style={{marginBottom: '10px', color: '#3f51b5'}}>Forgot Password?</NavLink>\r\n\t\t\t\t\t\t\t\t\t<Button className={styles.button} type={'submit'} variant={'contained'} color={'primary'}>Sign\r\n\t\t\t\t\t\t\t\t\t\tIn</Button>\r\n\t\t\t\t\t\t\t\t\t<NavLink to={'/registration'}>\r\n\t\t\t\t\t\t\t\t\t\t<Button className={styles.signUp} variant={'contained'} color={'secondary'}>Sign Up</Button>\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t</div>\r\n\r\n\t)\r\n})\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../DAL/api/authAPI\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\nimport {setAppErrorMessage} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n\tpasswordIsUpdated: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoveryPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"recoveryPassword/PASSWORD-IS-CONFIRMED\" : {\r\n\t\t\treturn {...state, passwordIsUpdated: action.value}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\n\r\n//Action creators\r\n\r\nconst updatePassword = (value: boolean) => {\r\n\treturn {type: 'recoveryPassword/PASSWORD-IS-CONFIRMED', value} as const\r\n}\r\n\r\n// Thanks\r\n\r\nexport const recoveryPasswordTC = (password: string, userId: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.setNewPassword(password, userId)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(updatePassword(true))\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tdispatch(setAppErrorMessage(error.response.data.error))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof updatePassword>","import React from \"react\";\r\nimport classes from './RecoveryPassword.module.scss';\r\nimport {Button, createStyles, FormControl, FormGroup, Grid, Paper, TextField, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useFormik} from \"formik\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Loading} from \"../../common/components-common/Loading/Loading\";\r\nimport {SnackbarError} from \"../../common/components-common/SnackbarError/SnackbarError\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {recoveryPasswordTC} from \"../../../BLL/reducers/recoveryPassword-reducer\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tgrid: {\r\n\t\t\tmaxWidth: '400px',\r\n\t\t\twidth: '100%',\r\n\t\t\tmargin: '0 30px'\r\n\t\t},\r\n\t\tformControl: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tcontainer: {\r\n\t\t\theight: '100vh',\r\n\t\t},\r\n\t\tformGroup: {\r\n\t\t\talignItems: 'center'\r\n\t\t},\r\n\t\ttextField: {\r\n\t\t\twidth: '100%',\r\n\t\t\tpaddingBottom: '30px',\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\twidth: '100%',\r\n\t\t\tmarginBottom: '15px',\r\n\t\t},\r\n\t\tregistration: {\r\n\t\t\ttextAlign: 'center',\r\n\t\t},\r\n\t}),\r\n);\r\n\r\ntype FormikErrorType = {\r\n\tpassword?: string\r\n\tconfirmPassword?: string\r\n}\r\n\r\nexport type UserDataType = {\r\n\tpassword: string\r\n\tconfirmPassword: string\r\n}\r\n\r\nexport const RecoveryPassword = React.memo(() => {\r\n\r\n\tconst styles = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst loading = useSelector<rootReducers, boolean>(state => state.profile.loading)\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst passwordIsUpdated = useSelector<rootReducers, boolean>(state => state.recoveryPassword.passwordIsUpdated)\r\n\r\n\t// get userId from URl\r\n\tconst {userId} = useParams()\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tpassword: '',\r\n\t\t\tconfirmPassword: '',\r\n\t\t},\r\n\t\tvalidate: (values: UserDataType) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.password) {\r\n\t\t\t\terrors.password = 'This field is required';\r\n\t\t\t} else if (values.password.length < 8) {\r\n\t\t\t\terrors.password = 'Password length should be at least 8 characters';\r\n\t\t\t} else if (values.confirmPassword !== values.password) {\r\n\t\t\t\terrors.confirmPassword = 'Passwords must match'\r\n\t\t\t}\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: (values, {resetForm}) => {\r\n\t\t\tdispatch(recoveryPasswordTC(values.password, userId))\r\n\t\t\tresetForm()\r\n\t\t},\r\n\t});\r\n\r\n\tif (passwordIsUpdated) return <Redirect to={'/Login'}/>\r\n\tif (isSignIn) return <Redirect to={'/'}/>\r\n\r\n\treturn (\r\n\t\t<div className={classes.recoveryPassword}>\r\n\t\t\t{loading && <Loading/>}\r\n\t\t\t<Title title={'Recovery Password Form'}/>\r\n\t\t\t<Grid container justify={\"center\"} alignItems={'center'} className={styles.container}>\r\n\t\t\t\t<Grid item className={styles.grid}>\r\n\t\t\t\t\t<Paper elevation={3} style={{padding: '30px'}}>\r\n\t\t\t\t\t\t<form className={classes.form} onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl className={styles.formControl}>\r\n\t\t\t\t\t\t\t\t<FormGroup className={styles.formGroup}>\r\n\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type={'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"New password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.password ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.password && <div className={classes.error}>{formik.errors.password}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t type={'password'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"Confirm password\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.confirmPassword ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('confirmPassword')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.confirmPassword &&\r\n                    <div className={classes.error}>{formik.errors.confirmPassword}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<Button type={'submit'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdisabled={!(formik.isValid && formik.dirty)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariant={\"contained\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'primary'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName={styles.button}>Save password\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<SnackbarError/>\r\n\t\t</div>\r\n\t)\r\n})","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../../DAL/api/authAPI\";\r\nimport {setLoadingAC} from \"./profile-reducer\";\r\nimport {setAppErrorMessage, setSuccessfulMessage} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n\temailSentSuccessful: false,\r\n\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const forgotPasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"forgotPassword/EMAIL-SET-SUCCESSFUL\" : {\r\n\t\t\treturn {...state, emailSentSuccessful: action.value}\r\n\t\t}\r\n\t}\r\n\treturn state\r\n}\r\n\r\n//Action creators\r\n\r\nexport const emailSentSuccessfulAC = (value: boolean) => {\r\n\treturn {type: 'forgotPassword/EMAIL-SET-SUCCESSFUL', value} as const\r\n}\r\n\r\n// Thanks\r\n\r\nexport const forgotPasswordTC = (email: string) => (dispatch: Dispatch) => {\r\n\tdispatch(setLoadingAC(true))\r\n\tauthAPI.sendRecoveryEmail(email)\r\n\t\t.then(res => {\r\n\t\t\tdispatch(emailSentSuccessfulAC(true))\r\n\t\t\tdispatch(setSuccessfulMessage(true))\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tdispatch(setAppErrorMessage(error.response.data.error))\r\n\t\t})\r\n\t\t.finally(() => dispatch(setLoadingAC(false)))\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof emailSentSuccessfulAC>","import React, {useCallback} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setSuccessfulMessage} from \"../../../../BLL/reducers/app-reducer\";\r\nimport {rootReducers} from \"../../../../BLL/store\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\ttypography: {\r\n\t\t\tpadding: theme.spacing(6),\r\n\t\t},\r\n\t}),\r\n);\r\n\r\nexport const SimplePopover = React.memo(() => {\r\n\tconst classes = useStyles();\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst isSuccessfulMessage = useSelector<rootReducers, boolean>(state => state.app.isSuccessfulMessage)\r\n\r\n\tconst handleClose = useCallback(() => {\r\n\t\tdispatch(setSuccessfulMessage(false))\r\n\t}, [dispatch])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Popover\r\n\t\t\t\topen={isSuccessfulMessage}\r\n\t\t\t\tonClose={handleClose}\r\n\t\t\t\tanchorOrigin={{vertical: 'center', horizontal: 'center',}}\r\n\t\t\t\ttransformOrigin={{vertical: 'center', horizontal: 'center',}}>\r\n\t\t\t\t<Typography style={{backgroundColor: '#3f51b5', color: '#fff'}} className={classes.typography}>Email was sent to\r\n\t\t\t\t\tyour address</Typography>\r\n\t\t\t</Popover>\r\n\t\t</div>\r\n\t);\r\n})","import React from \"react\";\r\nimport classes from './ForgotPassword.module.scss';\r\nimport {Button, createStyles, FormControl, FormGroup, Grid, Paper, TextField, Theme} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useFormik} from \"formik\";\r\nimport {Title} from \"../../common/components-common/Title/Title\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"../../../BLL/store\";\r\nimport {Loading} from \"../../common/components-common/Loading/Loading\";\r\nimport {SnackbarError} from \"../../common/components-common/SnackbarError/SnackbarError\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {forgotPasswordTC} from \"../../../BLL/reducers/forgotPassword-reducer\";\r\nimport {SimplePopover} from \"../../common/components-common/SimplePopover/SimplePopover\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n\tcreateStyles({\r\n\t\tgrid: {\r\n\t\t\tmaxWidth: '400px',\r\n\t\t\twidth: '100%',\r\n\t\t\tmargin: '0 30px'\r\n\t\t},\r\n\t\tformControl: {\r\n\t\t\twidth: '100%'\r\n\t\t},\r\n\t\tcontainer: {\r\n\t\t\theight: '100vh',\r\n\t\t},\r\n\t\tformGroup: {\r\n\t\t\talignItems: 'center'\r\n\t\t},\r\n\t\ttextField: {\r\n\t\t\twidth: '100%',\r\n\t\t\tpaddingBottom: '30px',\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\twidth: '100%',\r\n\t\t\tmarginBottom: '15px',\r\n\t\t},\r\n\t\tregistration: {\r\n\t\t\ttextAlign: 'center',\r\n\t\t},\r\n\t}),\r\n);\r\n\r\ntype FormikErrorType = {\r\n\temail?: string\r\n}\r\n\r\nexport type UserDataType = {\r\n\temail: string\r\n}\r\n\r\nexport const ForgotPassword = React.memo(() => {\r\n\r\n\tconst styles = useStyles();\r\n\tconst dispatch = useDispatch();\r\n\tconst loading = useSelector<rootReducers, boolean>(state => state.profile.loading)\r\n\tconst isSignIn = useSelector<rootReducers, boolean>(state => state.login.isSignIn)\r\n\tconst isSuccessfulMessage = useSelector<rootReducers, boolean>(state => state.app.isSuccessfulMessage)\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: ''\r\n\t\t},\r\n\t\tvalidate: (values: UserDataType) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'This field is required';\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Invalid email address';\r\n\t\t\t}\r\n\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: (values,{resetForm}) => {\r\n\t\t\tdispatch(forgotPasswordTC(values.email))\r\n\t\t\tresetForm()\r\n\t\t},\r\n\t});\r\n\r\n\tif (isSignIn) return <Redirect to={'/'}/>\r\n\r\n\treturn (\r\n\t\t<div className={classes.forgotPassword}>\r\n\t\t\t{loading && <Loading/>}\r\n\t\t\t<Title title={'Forgot Password Form'}/>\r\n\t\t\t<Grid container justify={\"center\"} alignItems={'center'} className={styles.container}>\r\n\t\t\t\t<Grid item className={styles.grid}>\r\n\t\t\t\t\t<Paper elevation={3} style={{padding: '30px'}}>\r\n\t\t\t\t\t\t<form className={classes.form} onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t\t\t<FormControl className={styles.formControl}>\r\n\t\t\t\t\t\t\t\t<FormGroup className={styles.formGroup}>\r\n\t\t\t\t\t\t\t\t\t<div className={classes.inputBox}>\r\n\t\t\t\t\t\t\t\t\t\t<TextField className={styles.textField}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t label=\"Write your email\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t variant=\"outlined\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t error={formik.errors.email ? true : undefined}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t {...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t{formik.errors.email && <div className={classes.error}>{formik.errors.email}</div>}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<Button type={'submit'} disabled={!(formik.isValid && formik.dirty)} variant={\"contained\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor={'primary'} className={styles.button}>Send</Button>\r\n\t\t\t\t\t\t\t\t\t<NavLink to={'/Login'} style={{textDecoration: 'none', width: '100%'}}>\r\n\t\t\t\t\t\t\t\t\t\t<Button style={{width: '100%'}} color={'secondary'} variant={\"contained\"}>Login</Button>\r\n\t\t\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Paper>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t<SnackbarError/>\r\n\t\t\t{isSuccessfulMessage && <SimplePopover/>}\r\n\t\t</div>\r\n\t)\r\n})","import React from \"react\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\n\r\nconst progressStyle = {\r\n\tposition: 'absolute',\r\n\ttop: '50%',\r\n\tleft: '50%',\r\n\ttransform: 'translate(-50%,-50%)'\r\n} as const\r\n\r\nexport const CircleLoading = React.memo(() => {\r\n\treturn (\r\n\t\t<div style={progressStyle}>\r\n\t\t\t<CircularProgress/>\r\n\t\t</div>\r\n\t)\r\n})","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducers} from \"./BLL/store\";\r\nimport {RegistrationForm} from \"./UI/components/RegistrationForm/RegistrationForm\";\r\nimport {Profile} from \"./UI/components/Profile/Profile\";\r\nimport {Login} from \"./UI/components/Login/Login\";\r\nimport {RecoveryPassword} from \"./UI/components/RecoveryPassword/RecoveryPassword\";\r\nimport {ForgotPassword} from './UI/components/ForgotPassword/FogotPassword';\r\nimport {initializeAppTC} from \"./BLL/reducers/app-reducer\";\r\nimport {CircleLoading} from \"./UI/common/components-common/Loading/CircleLoading\";\r\n\r\nconst App = () => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst isInitialized = useSelector<rootReducers, boolean>(state => state.app.isInitialized)\r\n\r\n\t// initialize our whole app (sending query to the server if we logged in or not)\r\n\tuseEffect(() => {\r\n\t\tdispatch(initializeAppTC())\r\n\t}, [dispatch])\r\n\r\n\tif (!isInitialized) return <CircleLoading/>\r\n\r\n\treturn (\r\n\t\t<HashRouter>\r\n\t\t\t\t<div className=\"App\">\r\n\t\t\t\t\t<Route exact path={'/'} render={() => <Profile/>}/>\r\n\t\t\t\t\t<Route path={'/registration'} render={() => <RegistrationForm/>}/>\r\n\t\t\t\t\t<Route path={'/Login'} render={() => <Login/>}/>\r\n\t\t\t\t\t<Route path={'/forgotPassword'} render={() => <ForgotPassword/>}/>\r\n\t\t\t\t\t<Route path={'/recovery/:userId'} render={() => <RecoveryPassword/>}/>\r\n\t\t\t\t</div>\r\n\t\t</HashRouter>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('SnackbarError during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {profileReducer} from \"./reducers/profile-reducer\";\r\nimport {registrationReducer} from \"./reducers/registration-reducer\";\r\nimport {loginReducer} from \"./reducers/login-reducer\";\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {recoveryPasswordReducer} from \"./reducers/recoveryPassword-reducer\";\r\nimport {forgotPasswordReducer} from \"./reducers/forgotPassword-reducer\";\r\n\r\nconst reducers = combineReducers({\r\n\tprofile: profileReducer,\r\n\tregistration: registrationReducer,\r\n\tlogin: loginReducer,\r\n\tapp: appReducer,\r\n\trecoveryPassword: recoveryPasswordReducer,\r\n\tforgotPassword: forgotPasswordReducer\r\n})\r\n\r\nexport type rootReducers = ReturnType<typeof reducers>\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from \"./BLL/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n    <App />\r\n\t</Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationForm\":\"RegistrationForm_registrationForm___mcIv\",\"inputBox\":\"RegistrationForm_inputBox__1KGpA\",\"error\":\"RegistrationForm_error__2bM7-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recoveryPassword\":\"RecoveryPassword_recoveryPassword__QCnqF\",\"inputBox\":\"RecoveryPassword_inputBox__3h1TK\",\"error\":\"RecoveryPassword_error__1A7ZL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forgotPassword\":\"ForgotPassword_forgotPassword__3kUX3\",\"inputBox\":\"ForgotPassword_inputBox__tYNiZ\",\"error\":\"ForgotPassword_error__1KoeN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContent\":\"Profile_profileContent__12fFa\",\"btn\":\"Profile_btn__1bBM3\",\"loading\":\"Profile_loading__3GbAF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1RTB2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_container__1jjuF\"};","module.exports = __webpack_public_path__ + \"static/media/spinner.cceb1073.svg\";"],"sourceRoot":""}